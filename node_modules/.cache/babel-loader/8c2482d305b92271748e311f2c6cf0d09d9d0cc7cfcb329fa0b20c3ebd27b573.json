{"ast":null,"code":"// var numbers = [3, 56, 2, 48, 5];\n\n//Map -Create a new array by doing something with each item in an array.\n\n//Using Map function\n// function double(x) {\n//     return x * 2;\n// }\n// const newNumbers = numbers.map(double);\n\n//Using forEach loop\n// var newNumbers = [];\n// numbers.forEach(function (x) {\n//     newNumbers.push(x * 2);\n// })\n\n//Using Map function and making it shorter\n// const newNumbers = numbers.map(function (x) {\n//     return x * 2;\n// });\n\n//Filter - Create a new array by keeping the items that return true.\n\n//Using Filter function\n// const newNumbers = numbers.filter(function (num) {\n//     return num > 10\n// });\n\n//Using forEach loop\n// var newNumber = []\n// numbers.forEach(function(num) {\n//     if (num < 10) {\n//         newNumbers.push(num)\n//     }\n// })\n\n//Reduce - Accumulate a value by doing something to each item in an array.\n\n//Using forEach loop\n// var newNumber = 0\n// numbers.forEach(function (currentNumber) {\n//     newNumber += currentNumber\n// })\n\n//Using Reduce function\n// var newNumber = numbers.reduce(function (accumulator, currentNumber) {\n//     console.log(\"accumulator = \" + accumulator)\n//     console.log(\"currentNumber = \" + currentNumber)\n//     return accumulator + currentNumber;\n// })\n\n//Find - find the first item that matches from an array.\n\n// const newNumber = numbers.find(function (num) {\n//     return num > 10;\n// })\n\n//FindIndex - find the index of the first item that matches.\n\n// const newNumber = numbers.findIndex(function (num) {\n//     return num > 10;\n// })\n\nimport emojipedia from \"./emojipedia\";\nvar newMeaning = emojipedia.map(function (x) {\n  return x.meaning.substring(0, 99);\n});\nconsole.log(newMeaning);","map":{"version":3,"names":["emojipedia","newMeaning","map","x","meaning","substring","console","log"],"sources":["/Users/brunogomes/Dev2/React/map-filter-reduce/src/index.js"],"sourcesContent":["// var numbers = [3, 56, 2, 48, 5];\n\n//Map -Create a new array by doing something with each item in an array.\n\n//Using Map function\n// function double(x) {\n//     return x * 2;\n// }\n// const newNumbers = numbers.map(double);\n\n//Using forEach loop\n// var newNumbers = [];\n// numbers.forEach(function (x) {\n//     newNumbers.push(x * 2);\n// })\n\n//Using Map function and making it shorter\n// const newNumbers = numbers.map(function (x) {\n//     return x * 2;\n// });\n\n\n//Filter - Create a new array by keeping the items that return true.\n\n//Using Filter function\n// const newNumbers = numbers.filter(function (num) {\n//     return num > 10\n// });\n\n\n//Using forEach loop\n// var newNumber = []\n// numbers.forEach(function(num) {\n//     if (num < 10) {\n//         newNumbers.push(num)\n//     }\n// })\n\n//Reduce - Accumulate a value by doing something to each item in an array.\n\n//Using forEach loop\n// var newNumber = 0\n// numbers.forEach(function (currentNumber) {\n//     newNumber += currentNumber\n// })\n\n//Using Reduce function\n// var newNumber = numbers.reduce(function (accumulator, currentNumber) {\n//     console.log(\"accumulator = \" + accumulator)\n//     console.log(\"currentNumber = \" + currentNumber)\n//     return accumulator + currentNumber;\n// })\n\n//Find - find the first item that matches from an array.\n\n// const newNumber = numbers.find(function (num) {\n//     return num > 10;\n// })\n\n//FindIndex - find the index of the first item that matches.\n\n// const newNumber = numbers.findIndex(function (num) {\n//     return num > 10;\n// })\n\nimport emojipedia from \"./emojipedia\";\n\nconst newMeaning = emojipedia.map(x => x.meaning.substring(0, 99))\n\nconsole.log(newMeaning)\n"],"mappings":"AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,OAAOA,UAAU,MAAM,cAAc;AAErC,IAAMC,UAAU,GAAGD,UAAU,CAACE,GAAG,CAAC,UAAAC,CAAC;EAAA,OAAIA,CAAC,CAACC,OAAO,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;AAAA,EAAC;AAElEC,OAAO,CAACC,GAAG,CAACN,UAAU,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}